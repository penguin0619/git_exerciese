프로세스에 관련 어떻게 생성???(6.2부터) -> fork() : 나머지는 없음

fork는 한번 호출되어서 2개의 return 값을 가진다.
-> 0을 리턴하고 새로만들어진 Child Process의 ID를 리턴함.

child process는 getppid를 Call해서 parent Process ID를 얻는다.

fork는 exec()을 통해서 실행되어야할 code를 올려준다.

fork()를 하면 다른 두개의 프로세스가 다른 메모리에 올라가서 각각 실행된다.

fork()를 두개 실행시킬시에 어는것을 먼저 실행시켜야 할지 정할수없다 -> 시스템마음대로, 그렇기 때문에 
예제의 fork3.c의 격과값은 예측할 수 없다.

순서를 알수없기에 parent와 child가 한 파일을 공유하고 있다고 할때 Write를 할 경우 심각한 문제에 빠질 수 있다.

통상적으로 2가지 방법이 사용되는데 

첫번쨰는 Parent가 Child가 끝날 때 까지 기다리는 것이다.

두번째는 파일디스크립터가 필요없을경우 close해버린다.

두번째 예제는 A4를 통해서 

Parent에서 Child로 상속되는것?

1. UserID, GroupID, 현재 작업중인 디렉토리, root directory, file mode creation mask,enviroment 등.... (상식적인 이야기들 외우는 것 x)

상속되지 않는것

1. Process ID는 다름. 

2.pending alarm(모닝콜 같은것)은 상속되지 않음.

3.file lock

4.모든 pending signal들은 empty가 된다. (child에 전혀 영향을 주지 않음)


vfork()-> 자식프로세스를 생성하지만 자식프로세스를 위한 메모리를 할당하지 않음.(부모의 메모리 공간을 그대로 이용한다.)

장점-> 공간이 적게들고, context switching이 용이함.
단점-> 하지만 많이 위험할수있음. 그리고 그닥 유용하지 않음.
(이런게 있었다는 정도로만 알아두고..)

exit()
->어떻게 프로세스가 종료되는 것에 상관없이 결국에는 커널에서 모든 것을 종료해야한다.


Parent가 child의 종료상태를 알수있따. ->wait() or waitpid()으로...

만약 child 보다 parent가 먼저 종료된다면? -> init이 child의 부모가 된다. (데몬프로세스)

child가 먼저종료됬는데 부모가 wait나 waitpid 함수를 쓰지 않았다면?? -> 그런 프로세스는 전부다 좀비프로세스가 된다.


Parent가 wait나 waitpid를 쓰지 않으면 child가 좀비에 빠져 있을 확률이 크다.

Child가종료되면 SIGCHLD라는 signal을 parent에 보낸다.

만약에 SIGCHLD가 들어오면 Parent에서 Default는 아무 일을 하지 않는다.
-> Handler를 통해서 조작가능

Process -> Child가 종료할때 까지 Block -> 커널에서 SIGCHLD보냄 ->만약 이미 child가 종료되어있거나 error가 있을경우 바로 return 


wait() -> 모든 child가 종료될 때까지 wait
waitpid()-> 자식프로세스를 고를수있다.

WIFEXITED -> 정상종료 매크로  WIFSIGNALED -> 비정상종료 매크로.
